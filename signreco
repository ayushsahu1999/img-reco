import cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import operator
#read the query and the template image in gray_sacle  
ref_img1 = cv2.imread("blessings/image_data/blessingspolyclinic_1537803429000-0-final.jpg",0)
ref_img1 = ref_img1[ref_img1.shape[0]//2:ref_img1.shape[0], ref_img1.shape[1]//2:ref_img1.shape[1]]
ref_img = cv2.GaussianBlur(ref_img1, (5,5), 0)
ref_img = cv2.adaptiveThreshold(ref_img,                           # input image
                           255,                                  # make pixels that pass the threshold full white
                           cv2.ADAPTIVE_THRESH_GAUSSIAN_C,       # use gaussian rather than mean, seems to give better results
                           cv2.THRESH_BINARY_INV,                # invert so foreground will be white, background will be black
                           11,                                   # size of a pixel neighborhood used to calculate threshold value
                           2)
#ref_img = image.crop((ref_img.shape[1]//2, ref_img.shape[0]//2, ref_img.shape[1], ref_img.shape[0]))

template_imgs = []
doc = Image.open('./blessings/image_data/blessingspolyclinic_1420070559000-0-final.jpg')
doc = np.asarray(doc)
template_img = doc[846:946, 684:745]
template_img = cv2.cvtColor(template_img, cv2.COLOR_BGR2GRAY)
template_img = cv2.GaussianBlur(template_img, (5,5), 0)
template_img = cv2.adaptiveThreshold(template_img,                          
                           255,                                  
                           cv2.ADAPTIVE_THRESH_GAUSSIAN_C,       
                           cv2.THRESH_BINARY_INV,                
                           11,
                           2)
template_imgs.append(template_img)

doc = Image.open('./blessings/image_data/blessingspolyclinic_1420110267000-0-final.jpg')
doc = np.asarray(doc)
template_img = doc[805:867, 697:753]
template_img = cv2.cvtColor(template_img, cv2.COLOR_BGR2GRAY)
template_img = cv2.GaussianBlur(template_img, (5,5), 0)
template_img = cv2.adaptiveThreshold(template_img,                          
                           255,                                  
                           cv2.ADAPTIVE_THRESH_GAUSSIAN_C,       
                           cv2.THRESH_BINARY_INV,                
                           11,
                           2)
template_imgs.append(template_img)

doc = Image.open('./blessings/image_data/blessingspolyclinic_1420110991000-0-final.jpg')
doc = np.asarray(doc)
template_img = doc[830:919, 717:751]
template_img = cv2.cvtColor(template_img, cv2.COLOR_BGR2GRAY)
template_img = cv2.GaussianBlur(template_img, (5,5), 0)
template_img = cv2.adaptiveThreshold(template_img,                          
                           255,                                  
                           cv2.ADAPTIVE_THRESH_GAUSSIAN_C,       
                           cv2.THRESH_BINARY_INV,                
                           11,
                           2)
template_imgs.append(template_img)

doc = Image.open('./blessings/image_data/blessingspolyclinic_1530107554000-0-final.jpg')
doc = np.asarray(doc)
template_img = doc[821:900, 705:765]
template_img = cv2.cvtColor(template_img, cv2.COLOR_BGR2GRAY)
template_img = cv2.GaussianBlur(template_img, (5,5), 0)
template_img = cv2.adaptiveThreshold(template_img,                          
                           255,                                  
                           cv2.ADAPTIVE_THRESH_GAUSSIAN_C,       
                           cv2.THRESH_BINARY_INV,                
                           11,
                           2)
template_imgs.append(template_img)

doc = Image.open('./blessings/image_data/blessingspolyclinic_1530202986000-0-final.jpg')
doc = np.asarray(doc)
template_img = doc[641:739, 649:704]
template_img = cv2.cvtColor(template_img, cv2.COLOR_BGR2GRAY)
template_img = cv2.GaussianBlur(template_img, (5,5), 0)
template_img = cv2.adaptiveThreshold(template_img,                          
                           255,                                  
                           cv2.ADAPTIVE_THRESH_GAUSSIAN_C,       
                           cv2.THRESH_BINARY_INV,                
                           11,
                           2)
template_imgs.append(template_img)

doc = Image.open('./blessings/image_data/blessingspolyclinic_1534049838000-0-final.jpg')
doc = np.asarray(doc)
template_img = doc[847:934, 692:761]
template_img = cv2.cvtColor(template_img, cv2.COLOR_BGR2GRAY)
template_img = cv2.GaussianBlur(template_img, (5,5), 0)
template_img = cv2.adaptiveThreshold(template_img,                          
                           255,                                  
                           cv2.ADAPTIVE_THRESH_GAUSSIAN_C,       
                           cv2.THRESH_BINARY_INV,                
                           11,
                           2)
template_imgs.append(template_img)

for template_img in template_imgs:
    plt.imshow(template_img)
    plt.show()

min_locs_x = []
min_locs_y = []
max_locs_x = []
max_locs_y = []
max_vals = []
abc = 0

for template_img in template_imgs:
    
    w, h = template_img.shape[::-1]
    #the methods to be used for template matching
    # meth = 'cv2.TM_CCOEFF_NORMED'
    #set a threshold to qualify for a match
    threshold = 0.80

#     plt.imshow(template_img)
#     plt.show()

    #the methods to be used for template matching
    methods = ['cv2.TM_CCOEFF_NORMED','cv2.TM_CCORR_NORMED']
    #set a threshold to qualify for a match
    
    #loop overboth the methods and do template matching
    #plot the results if the threshold is qualified
    for meth in methods:
        img = ref_img.copy()
        img1 = ref_img1.copy()

        method = eval(meth)

        # Apply template Matching
        res = cv2.matchTemplate(img,template_img,method)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)

        top_left = max_loc
        bottom_right = (top_left[0] + w, top_left[1] + h)
        print (max_val)
        if max_val >= threshold:
            abc = 999
            print (meth)
            print(min_val,max_val)
            
            
            cv2.rectangle(img1,top_left, bottom_right, 0, 2)

            plt.figure(figsize=(40,20))
            plt.imshow(img1)
            plt.show()
            
        else:
            max_vals.append(max_val)
            min_locs_x.append(top_left[0])
            min_locs_y.append(top_left[1])
            max_locs_x.append(bottom_right[0])
            max_locs_y.append(bottom_right[1])
    #         plt.subplot(121),plt.imshow(res,cmap = 'gray')
    #         plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    #         plt.figure(figsize=(40,20))

    #         plt.imshow(img,cmap = 'gray')
    #         plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    #         plt.suptitle(meth)

    #         plt.show()
# print (max(max_vals))
if not(abc == 999):
    for i in range(0, len(max_vals)):
        if (max_vals[i] == max(max_vals)):
            min_loc_x = min_locs_x[i]
            min_loc_y = min_locs_y[i]
            max_loc_x = max_locs_x[i]
            max_loc_y = max_locs_y[i]
            
            cv2.rectangle(img1,(min_loc_x, min_loc_y), (max_loc_x, max_loc_y), 0, 2)
            plt.figure(figsize=(40,20))
            plt.imshow(img1)
            plt.show()

